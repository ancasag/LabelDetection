{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "TRa7cfdhBNB6"
   },
   "source": [
    "# Creating a YOLO model\n",
    "\n",
    "We first install the YOLO library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "g-PSqx7fARiB"
   },
   "outputs": [],
   "source": [
    "!git clone https://github.com/joheras/darknet-colab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "onJj-2S3BT7j"
   },
   "outputs": [],
   "source": [
    "cd darknet-colab/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "u1ImjD0IBXDR"
   },
   "outputs": [],
   "source": [
    "!make"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "UqS0l2UjB1L-"
   },
   "outputs": [],
   "source": [
    "!pip install matplotlib\n",
    "!pip install clodsa\n",
    "!pip install imutils\n",
    "!pip install shutil"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "t4jOYZzUrYWZ"
   },
   "source": [
    "Now, we download the necessary files. The following files are employed for fine-tuning the network and configuring the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ayihpQeHCX6H"
   },
   "outputs": [],
   "source": [
    "!wget https://www.dropbox.com/s/0js92hbmkozgn46/funciones.py?dl=1 -O funciones.py\n",
    "!wget https://www.dropbox.com/s/k8tj95uc25x2u7d/pascal2yolo_1class.py?dl=1 -O pascal2yolo_1class.py\n",
    "!wget https://pjreddie.com/media/files/darknet53.conv.74 -O darknet53.conv.74\n",
    "!wget https://www.dropbox.com/s/5pkkrx82q9dd7ml/detect.py?dl=1 -O detect.py\n",
    "!wget https://www.dropbox.com/s/s5ogv96lxqxhr4v/generateXML.py?dl=1 -O generateXML.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "cDai0KHt-Vnk"
   },
   "outputs": [],
   "source": [
    "from funciones import *\n",
    "from pascal2yolo_1class import *\n",
    "from detect import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Y2WUCQioDRKu"
   },
   "source": [
    "We download the dataset. If you are working with Google Colab, you have several options to download the dataset in this notebook, see the available options in the [LabelDetection documentation](https://github.com/ancasag/LabelDetection)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "cy1dqINwCsdZ"
   },
   "outputs": [],
   "source": [
    "!cp /content/drive/My\\ Drive/datasets/dataset.zip dataset.zip\n",
    "!unzip dataset.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "QPdjcAfUDyZB"
   },
   "source": [
    "We start the training process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MGIQImThtYTg"
   },
   "outputs": [],
   "source": [
    "!./darknet detector train dataset/classes.data dataset/train.cfg darknet53.conv.74 -dont_show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KXyCul6TQ6U0"
   },
   "source": [
    "Finally, we evaluate the model to know its performance in an independent test set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ffO49ns59RrN"
   },
   "outputs": [],
   "source": [
    "!./darknet detector map dataset/classes.data dataset/test.cfg backup/train_final.weights -thresh 0.25"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "52EmMnvfETPG"
   },
   "source": [
    "At the end you will have your model in the file pesos. Those weights can be included in the application to be employed with new images. \n",
    "\n",
    "\n",
    "## Data distillation\n",
    "\n",
    "After training a model with the annotated images, it is possible to apply a data distillation procedure to create a model using the unlabelled images. You can only apply this techique if there were unlabelled images in your dataset. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xIVyBtN2N9e6"
   },
   "source": [
    "We first install the library for ensemble methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "650p4CQvN_yS"
   },
   "outputs": [],
   "source": [
    "!git clone https://github.com/ancasag/ensembleObjectDetection.git"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hkA2roh9ODPT"
   },
   "outputs": [],
   "source": [
    "cd ensembleObjectDetection/TestTimeAugmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ci2OMkWXONhq"
   },
   "outputs": [],
   "source": [
    "!pip install mrcnn\n",
    "!pip install keras-retinanet\n",
    "!pip install gluoncv\n",
    "!pip install mxnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qK7UPnzgOEID"
   },
   "outputs": [],
   "source": [
    "import testTimeAugmentation\n",
    "import function\n",
    "import os\n",
    "import shutil\n",
    "import argparse\n",
    "import ensembleOptions\n",
    "from mainTTA import tta\n",
    "from imutils import paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-oX36h_JOe3S"
   },
   "outputs": [],
   "source": [
    "pathImg = '/content/darknet-colab/dataset/unlabelled/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ULvvZoqcOknh"
   },
   "outputs": [],
   "source": [
    "yolo = testTimeAugmentation.DarknetYoloPred('/content/darknet-colab/backup/train_final.weights', '/content/darknet-colab/dataset/classes.names','/content/darknet-colab/dataset/train.cfg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gHZT_AxOO7ox"
   },
   "outputs": [],
   "source": [
    "myTechniques = [ \"histo\",\"hflip\",\"none\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "BejTEgflO9CJ"
   },
   "outputs": [],
   "source": [
    "option = \"affirmative\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wP24B-z8PCDR"
   },
   "outputs": [],
   "source": [
    "tta(yolo,myTechniques,pathImg,option)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "E-92U_ioEcE3"
   },
   "source": [
    "We convert the annotations of the new predictions to txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "H3-S9KZ7SP4R"
   },
   "outputs": [],
   "source": [
    "cd /content/darknet-colab/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GcHLIiz35uES"
   },
   "outputs": [],
   "source": [
    "principal('/content/darknet-colab/dataset/unlabelled') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "6rPB7Qz16HnR"
   },
   "source": [
    "We move the jpg and txt to the train carpet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Dejljs_f6Mmq"
   },
   "outputs": [],
   "source": [
    "moverTxt('/content/darknet-colab/dataset/unlabelled/', '/content/darknet-colab/dataset/train/labels/')\n",
    "moverImg('/content/darknet-colab/dataset/unlabelled/', '/content/darknet-colab/dataset/train/JPEGImages/')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zclwa0uA9lJI"
   },
   "outputs": [],
   "source": [
    "!./darknet detector train dataset/classes.data dataset/train.cfg darknet53.conv.74 -dont_show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nsG2ybNqFyCs"
   },
   "outputs": [],
   "source": [
    "!./darknet detector map dataset/classes.data dataset/test.cfg backup/train_final.weights -thresh 0.25"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "s4xoETJHSa_g"
   },
   "source": [
    "---------------------------\n",
    "\n",
    "\n",
    "# Using the model in LabelDetection\n",
    "\n",
    "If you want to use the trained model with LabelDetection, you must download the following files:\n",
    "\n",
    "- /content/darknet-colab/backup/train_final.weights\n",
    "- /content/darknet-colab/dataset/train.cfg\n",
    "- /content/darknet-colab/dataset/classes.names"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "YOLODDBueno.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
